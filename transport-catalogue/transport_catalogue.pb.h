// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace proto {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Distance;
struct DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeInfo;
struct EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class Graph;
struct GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class IncidenceList;
struct IncidenceListDefaultTypeInternal;
extern IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
class Main;
struct MainDefaultTypeInternal;
extern MainDefaultTypeInternal _Main_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RenderSettings;
struct RenderSettingsDefaultTypeInternal;
extern RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
class Rgb;
struct RgbDefaultTypeInternal;
extern RgbDefaultTypeInternal _Rgb_default_instance_;
class Rgba;
struct RgbaDefaultTypeInternal;
extern RgbaDefaultTypeInternal _Rgba_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class StopVertexId;
struct StopVertexIdDefaultTypeInternal;
extern StopVertexIdDefaultTypeInternal _StopVertexId_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
class TransportRouter;
struct TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Bus* Arena::CreateMaybeMessage<::proto::Bus>(Arena*);
template<> ::proto::Color* Arena::CreateMaybeMessage<::proto::Color>(Arena*);
template<> ::proto::Coordinates* Arena::CreateMaybeMessage<::proto::Coordinates>(Arena*);
template<> ::proto::Distance* Arena::CreateMaybeMessage<::proto::Distance>(Arena*);
template<> ::proto::Edge* Arena::CreateMaybeMessage<::proto::Edge>(Arena*);
template<> ::proto::EdgeInfo* Arena::CreateMaybeMessage<::proto::EdgeInfo>(Arena*);
template<> ::proto::Graph* Arena::CreateMaybeMessage<::proto::Graph>(Arena*);
template<> ::proto::IncidenceList* Arena::CreateMaybeMessage<::proto::IncidenceList>(Arena*);
template<> ::proto::Main* Arena::CreateMaybeMessage<::proto::Main>(Arena*);
template<> ::proto::Point* Arena::CreateMaybeMessage<::proto::Point>(Arena*);
template<> ::proto::RenderSettings* Arena::CreateMaybeMessage<::proto::RenderSettings>(Arena*);
template<> ::proto::Rgb* Arena::CreateMaybeMessage<::proto::Rgb>(Arena*);
template<> ::proto::Rgba* Arena::CreateMaybeMessage<::proto::Rgba>(Arena*);
template<> ::proto::RoutingSettings* Arena::CreateMaybeMessage<::proto::RoutingSettings>(Arena*);
template<> ::proto::Stop* Arena::CreateMaybeMessage<::proto::Stop>(Arena*);
template<> ::proto::StopVertexId* Arena::CreateMaybeMessage<::proto::StopVertexId>(Arena*);
template<> ::proto::TransportCatalogue* Arena::CreateMaybeMessage<::proto::TransportCatalogue>(Arena*);
template<> ::proto::TransportRouter* Arena::CreateMaybeMessage<::proto::TransportRouter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lat_;
    double lng_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoordinatesFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Coordinates coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::proto::Coordinates& coordinates() const;
  PROTOBUF_NODISCARD ::proto::Coordinates* release_coordinates();
  ::proto::Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::proto::Coordinates* coordinates);
  private:
  const ::proto::Coordinates& _internal_coordinates() const;
  ::proto::Coordinates* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::proto::Coordinates* coordinates);
  ::proto::Coordinates* unsafe_arena_release_coordinates();

  // @@protoc_insertion_point(class_scope:proto.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Coordinates* coordinates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  ~Distance() override;
  explicit PROTOBUF_CONSTEXPR Distance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Distance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Distance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Distance& from) {
    Distance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFromFieldNumber = 1,
    kStopToFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // string stop_from = 1;
  void clear_stop_from();
  const std::string& stop_from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_from();
  PROTOBUF_NODISCARD std::string* release_stop_from();
  void set_allocated_stop_from(std::string* stop_from);
  private:
  const std::string& _internal_stop_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_from(const std::string& value);
  std::string* _internal_mutable_stop_from();
  public:

  // string stop_to = 2;
  void clear_stop_to();
  const std::string& stop_to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_to();
  PROTOBUF_NODISCARD std::string* release_stop_to();
  void set_allocated_stop_to(std::string* stop_to);
  private:
  const std::string& _internal_stop_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_to(const std::string& value);
  std::string* _internal_mutable_stop_to();
  public:

  // double distance = 3;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_to_;
    double distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 2,
    kNameFieldNumber = 1,
    kIsRoundtripFieldNumber = 3,
  };
  // repeated .proto.Stop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::proto::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
      mutable_stops();
  private:
  const ::proto::Stop& _internal_stops(int index) const;
  ::proto::Stop* _internal_add_stops();
  public:
  const ::proto::Stop& stops(int index) const;
  ::proto::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
      stops() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_roundtrip = 3;
  void clear_is_roundtrip();
  bool is_roundtrip() const;
  void set_is_roundtrip(bool value);
  private:
  bool _internal_is_roundtrip() const;
  void _internal_set_is_roundtrip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_roundtrip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kDistancesFieldNumber = 2,
    kBusesFieldNumber = 3,
  };
  // repeated .proto.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::proto::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
      mutable_stops();
  private:
  const ::proto::Stop& _internal_stops(int index) const;
  ::proto::Stop* _internal_add_stops();
  public:
  const ::proto::Stop& stops(int index) const;
  ::proto::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
      stops() const;

  // repeated .proto.Distance distances = 2;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::proto::Distance* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >*
      mutable_distances();
  private:
  const ::proto::Distance& _internal_distances(int index) const;
  ::proto::Distance* _internal_add_distances();
  public:
  const ::proto::Distance& distances(int index) const;
  ::proto::Distance* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >&
      distances() const;

  // repeated .proto.Bus buses = 3;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::proto::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >*
      mutable_buses();
  private:
  const ::proto::Bus& _internal_buses(int index) const;
  ::proto::Bus* _internal_add_buses();
  public:
  const ::proto::Bus& buses(int index) const;
  ::proto::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >&
      buses() const;

  // @@protoc_insertion_point(class_scope:proto.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance > distances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus > buses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Rgb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Rgb) */ {
 public:
  inline Rgb() : Rgb(nullptr) {}
  ~Rgb() override;
  explicit PROTOBUF_CONSTEXPR Rgb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgb(const Rgb& from);
  Rgb(Rgb&& from) noexcept
    : Rgb() {
    *this = ::std::move(from);
  }

  inline Rgb& operator=(const Rgb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgb& operator=(Rgb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgb& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgb* internal_default_instance() {
    return reinterpret_cast<const Rgb*>(
               &_Rgb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Rgb& a, Rgb& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgb& from) {
    Rgb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Rgb";
  }
  protected:
  explicit Rgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
  };
  // uint32 red = 1;
  void clear_red();
  uint32_t red() const;
  void set_red(uint32_t value);
  private:
  uint32_t _internal_red() const;
  void _internal_set_red(uint32_t value);
  public:

  // uint32 green = 2;
  void clear_green();
  uint32_t green() const;
  void set_green(uint32_t value);
  private:
  uint32_t _internal_green() const;
  void _internal_set_green(uint32_t value);
  public:

  // uint32 blue = 3;
  void clear_blue();
  uint32_t blue() const;
  void set_blue(uint32_t value);
  private:
  uint32_t _internal_blue() const;
  void _internal_set_blue(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Rgb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t red_;
    uint32_t green_;
    uint32_t blue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Rgba final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Rgba) */ {
 public:
  inline Rgba() : Rgba(nullptr) {}
  ~Rgba() override;
  explicit PROTOBUF_CONSTEXPR Rgba(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgba(const Rgba& from);
  Rgba(Rgba&& from) noexcept
    : Rgba() {
    *this = ::std::move(from);
  }

  inline Rgba& operator=(const Rgba& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgba& operator=(Rgba&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgba& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgba* internal_default_instance() {
    return reinterpret_cast<const Rgba*>(
               &_Rgba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Rgba& a, Rgba& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgba* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgba* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgba>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgba& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgba& from) {
    Rgba::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgba* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Rgba";
  }
  protected:
  explicit Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kOpacityFieldNumber = 4,
    kBlueFieldNumber = 3,
  };
  // uint32 red = 1;
  void clear_red();
  uint32_t red() const;
  void set_red(uint32_t value);
  private:
  uint32_t _internal_red() const;
  void _internal_set_red(uint32_t value);
  public:

  // uint32 green = 2;
  void clear_green();
  uint32_t green() const;
  void set_green(uint32_t value);
  private:
  uint32_t _internal_green() const;
  void _internal_set_green(uint32_t value);
  public:

  // double opacity = 4;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // uint32 blue = 3;
  void clear_blue();
  uint32_t blue() const;
  void set_blue(uint32_t value);
  private:
  uint32_t _internal_blue() const;
  void _internal_set_blue(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Rgba)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t red_;
    uint32_t green_;
    double opacity_;
    uint32_t blue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorTypeFieldNumber = 1,
    kNameFieldNumber = 2,
    kRgbFieldNumber = 3,
    kRgbaFieldNumber = 4,
  };
  // string color_type = 1;
  void clear_color_type();
  const std::string& color_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color_type();
  PROTOBUF_NODISCARD std::string* release_color_type();
  void set_allocated_color_type(std::string* color_type);
  private:
  const std::string& _internal_color_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color_type(const std::string& value);
  std::string* _internal_mutable_color_type();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Rgb rgb = 3;
  bool has_rgb() const;
  private:
  bool _internal_has_rgb() const;
  public:
  void clear_rgb();
  const ::proto::Rgb& rgb() const;
  PROTOBUF_NODISCARD ::proto::Rgb* release_rgb();
  ::proto::Rgb* mutable_rgb();
  void set_allocated_rgb(::proto::Rgb* rgb);
  private:
  const ::proto::Rgb& _internal_rgb() const;
  ::proto::Rgb* _internal_mutable_rgb();
  public:
  void unsafe_arena_set_allocated_rgb(
      ::proto::Rgb* rgb);
  ::proto::Rgb* unsafe_arena_release_rgb();

  // .proto.Rgba rgba = 4;
  bool has_rgba() const;
  private:
  bool _internal_has_rgba() const;
  public:
  void clear_rgba();
  const ::proto::Rgba& rgba() const;
  PROTOBUF_NODISCARD ::proto::Rgba* release_rgba();
  ::proto::Rgba* mutable_rgba();
  void set_allocated_rgba(::proto::Rgba* rgba);
  private:
  const ::proto::Rgba& _internal_rgba() const;
  ::proto::Rgba* _internal_mutable_rgba();
  public:
  void unsafe_arena_set_allocated_rgba(
      ::proto::Rgba* rgba);
  ::proto::Rgba* unsafe_arena_release_rgba();

  // @@protoc_insertion_point(class_scope:proto.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Rgb* rgb_;
    ::proto::Rgba* rgba_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RenderSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RenderSettings) */ {
 public:
  inline RenderSettings() : RenderSettings(nullptr) {}
  ~RenderSettings() override;
  explicit PROTOBUF_CONSTEXPR RenderSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderSettings(const RenderSettings& from);
  RenderSettings(RenderSettings&& from) noexcept
    : RenderSettings() {
    *this = ::std::move(from);
  }

  inline RenderSettings& operator=(const RenderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderSettings& operator=(RenderSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderSettings* internal_default_instance() {
    return reinterpret_cast<const RenderSettings*>(
               &_RenderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RenderSettings& a, RenderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenderSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenderSettings& from) {
    RenderSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RenderSettings";
  }
  protected:
  explicit RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorPaletteFieldNumber = 12,
    kBusLabelOffsetFieldNumber = 7,
    kStopLabelOffsetFieldNumber = 9,
    kUnderlayerColorFieldNumber = 10,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kLineWidthFieldNumber = 4,
    kStopRadiusFieldNumber = 5,
    kBusLabelFontSizeFieldNumber = 6,
    kStopLabelFontSizeFieldNumber = 8,
    kUnderlayerWidthFieldNumber = 11,
  };
  // repeated .proto.Color color_palette = 12;
  int color_palette_size() const;
  private:
  int _internal_color_palette_size() const;
  public:
  void clear_color_palette();
  ::proto::Color* mutable_color_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color >*
      mutable_color_palette();
  private:
  const ::proto::Color& _internal_color_palette(int index) const;
  ::proto::Color* _internal_add_color_palette();
  public:
  const ::proto::Color& color_palette(int index) const;
  ::proto::Color* add_color_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color >&
      color_palette() const;

  // .proto.Point bus_label_offset = 7;
  bool has_bus_label_offset() const;
  private:
  bool _internal_has_bus_label_offset() const;
  public:
  void clear_bus_label_offset();
  const ::proto::Point& bus_label_offset() const;
  PROTOBUF_NODISCARD ::proto::Point* release_bus_label_offset();
  ::proto::Point* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::proto::Point* bus_label_offset);
  private:
  const ::proto::Point& _internal_bus_label_offset() const;
  ::proto::Point* _internal_mutable_bus_label_offset();
  public:
  void unsafe_arena_set_allocated_bus_label_offset(
      ::proto::Point* bus_label_offset);
  ::proto::Point* unsafe_arena_release_bus_label_offset();

  // .proto.Point stop_label_offset = 9;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::proto::Point& stop_label_offset() const;
  PROTOBUF_NODISCARD ::proto::Point* release_stop_label_offset();
  ::proto::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::proto::Point* stop_label_offset);
  private:
  const ::proto::Point& _internal_stop_label_offset() const;
  ::proto::Point* _internal_mutable_stop_label_offset();
  public:
  void unsafe_arena_set_allocated_stop_label_offset(
      ::proto::Point* stop_label_offset);
  ::proto::Point* unsafe_arena_release_stop_label_offset();

  // .proto.Color underlayer_color = 10;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::proto::Color& underlayer_color() const;
  PROTOBUF_NODISCARD ::proto::Color* release_underlayer_color();
  ::proto::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::proto::Color* underlayer_color);
  private:
  const ::proto::Color& _internal_underlayer_color() const;
  ::proto::Color* _internal_mutable_underlayer_color();
  public:
  void unsafe_arena_set_allocated_underlayer_color(
      ::proto::Color* underlayer_color);
  ::proto::Color* unsafe_arena_release_underlayer_color();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double line_width = 4;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double stop_radius = 5;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // uint32 bus_label_font_size = 6;
  void clear_bus_label_font_size();
  uint32_t bus_label_font_size() const;
  void set_bus_label_font_size(uint32_t value);
  private:
  uint32_t _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(uint32_t value);
  public:

  // uint32 stop_label_font_size = 8;
  void clear_stop_label_font_size();
  uint32_t stop_label_font_size() const;
  void set_stop_label_font_size(uint32_t value);
  private:
  uint32_t _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(uint32_t value);
  public:

  // double underlayer_width = 11;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.RenderSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color > color_palette_;
    ::proto::Point* bus_label_offset_;
    ::proto::Point* stop_label_offset_;
    ::proto::Color* underlayer_color_;
    double width_;
    double height_;
    double padding_;
    double line_width_;
    double stop_radius_;
    uint32_t bus_label_font_size_;
    uint32_t stop_label_font_size_;
    double underlayer_width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  ~RoutingSettings() override;
  explicit PROTOBUF_CONSTEXPR RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutingSettings& from) {
    RoutingSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusWaitTimeFieldNumber = 1,
    kBusVelocityFieldNumber = 2,
  };
  // double bus_wait_time = 1;
  void clear_bus_wait_time();
  double bus_wait_time() const;
  void set_bus_wait_time(double value);
  private:
  double _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(double value);
  public:

  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double bus_wait_time_;
    double bus_velocity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  uint32_t from() const;
  void set_from(uint32_t value);
  private:
  uint32_t _internal_from() const;
  void _internal_set_from(uint32_t value);
  public:

  // uint32 to = 2;
  void clear_to();
  uint32_t to() const;
  void set_to(uint32_t value);
  private:
  uint32_t _internal_to() const;
  void _internal_set_to(uint32_t value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t from_;
    uint32_t to_;
    double weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class IncidenceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.IncidenceList) */ {
 public:
  inline IncidenceList() : IncidenceList(nullptr) {}
  ~IncidenceList() override;
  explicit PROTOBUF_CONSTEXPR IncidenceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncidenceList(const IncidenceList& from);
  IncidenceList(IncidenceList&& from) noexcept
    : IncidenceList() {
    *this = ::std::move(from);
  }

  inline IncidenceList& operator=(const IncidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceList& operator=(IncidenceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidenceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidenceList* internal_default_instance() {
    return reinterpret_cast<const IncidenceList*>(
               &_IncidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IncidenceList& a, IncidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidenceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncidenceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IncidenceList& from) {
    IncidenceList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.IncidenceList";
  }
  protected:
  explicit IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated uint32 list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  private:
  uint32_t _internal_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_list() const;
  void _internal_add_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_list();
  public:
  uint32_t list(int index) const;
  void set_list(int index, uint32_t value);
  void add_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:proto.IncidenceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > list_;
    mutable std::atomic<int> _list_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Graph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  ~Graph() override;
  explicit PROTOBUF_CONSTEXPR Graph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Graph& from) {
    Graph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
    kIncidenceListsFieldNumber = 2,
  };
  // repeated .proto.Edge edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::proto::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Edge >*
      mutable_edges();
  private:
  const ::proto::Edge& _internal_edges(int index) const;
  ::proto::Edge* _internal_add_edges();
  public:
  const ::proto::Edge& edges(int index) const;
  ::proto::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Edge >&
      edges() const;

  // repeated .proto.IncidenceList incidence_lists = 2;
  int incidence_lists_size() const;
  private:
  int _internal_incidence_lists_size() const;
  public:
  void clear_incidence_lists();
  ::proto::IncidenceList* mutable_incidence_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::IncidenceList >*
      mutable_incidence_lists();
  private:
  const ::proto::IncidenceList& _internal_incidence_lists(int index) const;
  ::proto::IncidenceList* _internal_add_incidence_lists();
  public:
  const ::proto::IncidenceList& incidence_lists(int index) const;
  ::proto::IncidenceList* add_incidence_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::IncidenceList >&
      incidence_lists() const;

  // @@protoc_insertion_point(class_scope:proto.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Edge > edges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::IncidenceList > incidence_lists_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopVertexId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.StopVertexId) */ {
 public:
  inline StopVertexId() : StopVertexId(nullptr) {}
  ~StopVertexId() override;
  explicit PROTOBUF_CONSTEXPR StopVertexId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVertexId(const StopVertexId& from);
  StopVertexId(StopVertexId&& from) noexcept
    : StopVertexId() {
    *this = ::std::move(from);
  }

  inline StopVertexId& operator=(const StopVertexId& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVertexId& operator=(StopVertexId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVertexId& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVertexId* internal_default_instance() {
    return reinterpret_cast<const StopVertexId*>(
               &_StopVertexId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StopVertexId& a, StopVertexId& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVertexId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVertexId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopVertexId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopVertexId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVertexId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopVertexId& from) {
    StopVertexId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVertexId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.StopVertexId";
  }
  protected:
  explicit StopVertexId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStartWaitFieldNumber = 2,
    kEndWaitFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 start_wait = 2;
  void clear_start_wait();
  uint32_t start_wait() const;
  void set_start_wait(uint32_t value);
  private:
  uint32_t _internal_start_wait() const;
  void _internal_set_start_wait(uint32_t value);
  public:

  // uint32 end_wait = 3;
  void clear_end_wait();
  uint32_t end_wait() const;
  void set_end_wait(uint32_t value);
  private:
  uint32_t _internal_end_wait() const;
  void _internal_set_end_wait(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.StopVertexId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t start_wait_;
    uint32_t end_wait_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.EdgeInfo) */ {
 public:
  inline EdgeInfo() : EdgeInfo(nullptr) {}
  ~EdgeInfo() override;
  explicit PROTOBUF_CONSTEXPR EdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeInfo& from) {
    EdgeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.EdgeInfo";
  }
  protected:
  explicit EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kEdgeFieldNumber = 1,
    kTimeFieldNumber = 4,
    kSpanCountFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Edge edge = 1;
  bool has_edge() const;
  private:
  bool _internal_has_edge() const;
  public:
  void clear_edge();
  const ::proto::Edge& edge() const;
  PROTOBUF_NODISCARD ::proto::Edge* release_edge();
  ::proto::Edge* mutable_edge();
  void set_allocated_edge(::proto::Edge* edge);
  private:
  const ::proto::Edge& _internal_edge() const;
  ::proto::Edge* _internal_mutable_edge();
  public:
  void unsafe_arena_set_allocated_edge(
      ::proto::Edge* edge);
  ::proto::Edge* unsafe_arena_release_edge();

  // double time = 4;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // uint32 span_count = 3;
  void clear_span_count();
  uint32_t span_count() const;
  void set_span_count(uint32_t value);
  private:
  uint32_t _internal_span_count() const;
  void _internal_set_span_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.EdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Edge* edge_;
    double time_;
    uint32_t span_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  ~TransportRouter() override;
  explicit PROTOBUF_CONSTEXPR TransportRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportRouter& from) {
    TransportRouter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopVertexIdsFieldNumber = 3,
    kEdgesInfoFieldNumber = 4,
    kRoutingSettingsFieldNumber = 1,
    kGraphFieldNumber = 2,
  };
  // repeated .proto.StopVertexId stop_vertex_ids = 3;
  int stop_vertex_ids_size() const;
  private:
  int _internal_stop_vertex_ids_size() const;
  public:
  void clear_stop_vertex_ids();
  ::proto::StopVertexId* mutable_stop_vertex_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::StopVertexId >*
      mutable_stop_vertex_ids();
  private:
  const ::proto::StopVertexId& _internal_stop_vertex_ids(int index) const;
  ::proto::StopVertexId* _internal_add_stop_vertex_ids();
  public:
  const ::proto::StopVertexId& stop_vertex_ids(int index) const;
  ::proto::StopVertexId* add_stop_vertex_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::StopVertexId >&
      stop_vertex_ids() const;

  // repeated .proto.EdgeInfo edges_info = 4;
  int edges_info_size() const;
  private:
  int _internal_edges_info_size() const;
  public:
  void clear_edges_info();
  ::proto::EdgeInfo* mutable_edges_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EdgeInfo >*
      mutable_edges_info();
  private:
  const ::proto::EdgeInfo& _internal_edges_info(int index) const;
  ::proto::EdgeInfo* _internal_add_edges_info();
  public:
  const ::proto::EdgeInfo& edges_info(int index) const;
  ::proto::EdgeInfo* add_edges_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EdgeInfo >&
      edges_info() const;

  // .proto.RoutingSettings routing_settings = 1;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::proto::RoutingSettings& routing_settings() const;
  PROTOBUF_NODISCARD ::proto::RoutingSettings* release_routing_settings();
  ::proto::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::proto::RoutingSettings* routing_settings);
  private:
  const ::proto::RoutingSettings& _internal_routing_settings() const;
  ::proto::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::proto::RoutingSettings* routing_settings);
  ::proto::RoutingSettings* unsafe_arena_release_routing_settings();

  // .proto.Graph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::proto::Graph& graph() const;
  PROTOBUF_NODISCARD ::proto::Graph* release_graph();
  ::proto::Graph* mutable_graph();
  void set_allocated_graph(::proto::Graph* graph);
  private:
  const ::proto::Graph& _internal_graph() const;
  ::proto::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::proto::Graph* graph);
  ::proto::Graph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:proto.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::StopVertexId > stop_vertex_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EdgeInfo > edges_info_;
    ::proto::RoutingSettings* routing_settings_;
    ::proto::Graph* graph_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Main final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Main) */ {
 public:
  inline Main() : Main(nullptr) {}
  ~Main() override;
  explicit PROTOBUF_CONSTEXPR Main(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Main(const Main& from);
  Main(Main&& from) noexcept
    : Main() {
    *this = ::std::move(from);
  }

  inline Main& operator=(const Main& from) {
    CopyFrom(from);
    return *this;
  }
  inline Main& operator=(Main&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Main& default_instance() {
    return *internal_default_instance();
  }
  static inline const Main* internal_default_instance() {
    return reinterpret_cast<const Main*>(
               &_Main_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Main& a, Main& b) {
    a.Swap(&b);
  }
  inline void Swap(Main* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Main* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Main* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Main>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Main& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Main& from) {
    Main::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Main* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Main";
  }
  protected:
  explicit Main(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransportCatalogueFieldNumber = 1,
    kRenderSettingsFieldNumber = 2,
    kTransportRouterFieldNumber = 3,
  };
  // .proto.TransportCatalogue transport_catalogue = 1;
  bool has_transport_catalogue() const;
  private:
  bool _internal_has_transport_catalogue() const;
  public:
  void clear_transport_catalogue();
  const ::proto::TransportCatalogue& transport_catalogue() const;
  PROTOBUF_NODISCARD ::proto::TransportCatalogue* release_transport_catalogue();
  ::proto::TransportCatalogue* mutable_transport_catalogue();
  void set_allocated_transport_catalogue(::proto::TransportCatalogue* transport_catalogue);
  private:
  const ::proto::TransportCatalogue& _internal_transport_catalogue() const;
  ::proto::TransportCatalogue* _internal_mutable_transport_catalogue();
  public:
  void unsafe_arena_set_allocated_transport_catalogue(
      ::proto::TransportCatalogue* transport_catalogue);
  ::proto::TransportCatalogue* unsafe_arena_release_transport_catalogue();

  // .proto.RenderSettings render_settings = 2;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::proto::RenderSettings& render_settings() const;
  PROTOBUF_NODISCARD ::proto::RenderSettings* release_render_settings();
  ::proto::RenderSettings* mutable_render_settings();
  void set_allocated_render_settings(::proto::RenderSettings* render_settings);
  private:
  const ::proto::RenderSettings& _internal_render_settings() const;
  ::proto::RenderSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::proto::RenderSettings* render_settings);
  ::proto::RenderSettings* unsafe_arena_release_render_settings();

  // .proto.TransportRouter transport_router = 3;
  bool has_transport_router() const;
  private:
  bool _internal_has_transport_router() const;
  public:
  void clear_transport_router();
  const ::proto::TransportRouter& transport_router() const;
  PROTOBUF_NODISCARD ::proto::TransportRouter* release_transport_router();
  ::proto::TransportRouter* mutable_transport_router();
  void set_allocated_transport_router(::proto::TransportRouter* transport_router);
  private:
  const ::proto::TransportRouter& _internal_transport_router() const;
  ::proto::TransportRouter* _internal_mutable_transport_router();
  public:
  void unsafe_arena_set_allocated_transport_router(
      ::proto::TransportRouter* transport_router);
  ::proto::TransportRouter* unsafe_arena_release_transport_router();

  // @@protoc_insertion_point(class_scope:proto.Main)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TransportCatalogue* transport_catalogue_;
    ::proto::RenderSettings* render_settings_;
    ::proto::TransportRouter* transport_router_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  _impl_.lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return _impl_.lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:proto.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  _impl_.lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:proto.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  _impl_.lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return _impl_.lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:proto.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  _impl_.lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:proto.Coordinates.lng)
}

// -------------------------------------------------------------------

// Stop

// string name = 1;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:proto.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:proto.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Stop.name)
}

// .proto.Coordinates coordinates = 2;
inline bool Stop::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool Stop::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void Stop::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
}
inline const ::proto::Coordinates& Stop::_internal_coordinates() const {
  const ::proto::Coordinates* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Coordinates&>(
      ::proto::_Coordinates_default_instance_);
}
inline const ::proto::Coordinates& Stop::coordinates() const {
  // @@protoc_insertion_point(field_get:proto.Stop.coordinates)
  return _internal_coordinates();
}
inline void Stop::unsafe_arena_set_allocated_coordinates(
    ::proto::Coordinates* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Stop.coordinates)
}
inline ::proto::Coordinates* Stop::release_coordinates() {
  
  ::proto::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Coordinates* Stop::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:proto.Stop.coordinates)
  
  ::proto::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::proto::Coordinates* Stop::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Coordinates>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::proto::Coordinates* Stop::mutable_coordinates() {
  ::proto::Coordinates* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:proto.Stop.coordinates)
  return _msg;
}
inline void Stop::set_allocated_coordinates(::proto::Coordinates* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:proto.Stop.coordinates)
}

// -------------------------------------------------------------------

// Distance

// string stop_from = 1;
inline void Distance::clear_stop_from() {
  _impl_.stop_from_.ClearToEmpty();
}
inline const std::string& Distance::stop_from() const {
  // @@protoc_insertion_point(field_get:proto.Distance.stop_from)
  return _internal_stop_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Distance::set_stop_from(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stop_from_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Distance.stop_from)
}
inline std::string* Distance::mutable_stop_from() {
  std::string* _s = _internal_mutable_stop_from();
  // @@protoc_insertion_point(field_mutable:proto.Distance.stop_from)
  return _s;
}
inline const std::string& Distance::_internal_stop_from() const {
  return _impl_.stop_from_.Get();
}
inline void Distance::_internal_set_stop_from(const std::string& value) {
  
  _impl_.stop_from_.Set(value, GetArenaForAllocation());
}
inline std::string* Distance::_internal_mutable_stop_from() {
  
  return _impl_.stop_from_.Mutable(GetArenaForAllocation());
}
inline std::string* Distance::release_stop_from() {
  // @@protoc_insertion_point(field_release:proto.Distance.stop_from)
  return _impl_.stop_from_.Release();
}
inline void Distance::set_allocated_stop_from(std::string* stop_from) {
  if (stop_from != nullptr) {
    
  } else {
    
  }
  _impl_.stop_from_.SetAllocated(stop_from, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stop_from_.IsDefault()) {
    _impl_.stop_from_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Distance.stop_from)
}

// string stop_to = 2;
inline void Distance::clear_stop_to() {
  _impl_.stop_to_.ClearToEmpty();
}
inline const std::string& Distance::stop_to() const {
  // @@protoc_insertion_point(field_get:proto.Distance.stop_to)
  return _internal_stop_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Distance::set_stop_to(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stop_to_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Distance.stop_to)
}
inline std::string* Distance::mutable_stop_to() {
  std::string* _s = _internal_mutable_stop_to();
  // @@protoc_insertion_point(field_mutable:proto.Distance.stop_to)
  return _s;
}
inline const std::string& Distance::_internal_stop_to() const {
  return _impl_.stop_to_.Get();
}
inline void Distance::_internal_set_stop_to(const std::string& value) {
  
  _impl_.stop_to_.Set(value, GetArenaForAllocation());
}
inline std::string* Distance::_internal_mutable_stop_to() {
  
  return _impl_.stop_to_.Mutable(GetArenaForAllocation());
}
inline std::string* Distance::release_stop_to() {
  // @@protoc_insertion_point(field_release:proto.Distance.stop_to)
  return _impl_.stop_to_.Release();
}
inline void Distance::set_allocated_stop_to(std::string* stop_to) {
  if (stop_to != nullptr) {
    
  } else {
    
  }
  _impl_.stop_to_.SetAllocated(stop_to, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stop_to_.IsDefault()) {
    _impl_.stop_to_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Distance.stop_to)
}

// double distance = 3;
inline void Distance::clear_distance() {
  _impl_.distance_ = 0;
}
inline double Distance::_internal_distance() const {
  return _impl_.distance_;
}
inline double Distance::distance() const {
  // @@protoc_insertion_point(field_get:proto.Distance.distance)
  return _internal_distance();
}
inline void Distance::_internal_set_distance(double value) {
  
  _impl_.distance_ = value;
}
inline void Distance::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:proto.Distance.distance)
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:proto.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:proto.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Bus.name)
}

// repeated .proto.Stop stops = 2;
inline int Bus::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int Bus::stops_size() const {
  return _internal_stops_size();
}
inline void Bus::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::proto::Stop* Bus::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Bus.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
Bus::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:proto.Bus.stops)
  return &_impl_.stops_;
}
inline const ::proto::Stop& Bus::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::proto::Stop& Bus::stops(int index) const {
  // @@protoc_insertion_point(field_get:proto.Bus.stops)
  return _internal_stops(index);
}
inline ::proto::Stop* Bus::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::proto::Stop* Bus::add_stops() {
  ::proto::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:proto.Bus.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
Bus::stops() const {
  // @@protoc_insertion_point(field_list:proto.Bus.stops)
  return _impl_.stops_;
}

// bool is_roundtrip = 3;
inline void Bus::clear_is_roundtrip() {
  _impl_.is_roundtrip_ = false;
}
inline bool Bus::_internal_is_roundtrip() const {
  return _impl_.is_roundtrip_;
}
inline bool Bus::is_roundtrip() const {
  // @@protoc_insertion_point(field_get:proto.Bus.is_roundtrip)
  return _internal_is_roundtrip();
}
inline void Bus::_internal_set_is_roundtrip(bool value) {
  
  _impl_.is_roundtrip_ = value;
}
inline void Bus::set_is_roundtrip(bool value) {
  _internal_set_is_roundtrip(value);
  // @@protoc_insertion_point(field_set:proto.Bus.is_roundtrip)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .proto.Stop stops = 1;
inline int TransportCatalogue::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::proto::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.stops)
  return &_impl_.stops_;
}
inline const ::proto::Stop& TransportCatalogue::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::proto::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::proto::Stop* TransportCatalogue::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::proto::Stop* TransportCatalogue::add_stops() {
  ::proto::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.stops)
  return _impl_.stops_;
}

// repeated .proto.Distance distances = 2;
inline int TransportCatalogue::_internal_distances_size() const {
  return _impl_.distances_.size();
}
inline int TransportCatalogue::distances_size() const {
  return _internal_distances_size();
}
inline void TransportCatalogue::clear_distances() {
  _impl_.distances_.Clear();
}
inline ::proto::Distance* TransportCatalogue::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.distances)
  return _impl_.distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >*
TransportCatalogue::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.distances)
  return &_impl_.distances_;
}
inline const ::proto::Distance& TransportCatalogue::_internal_distances(int index) const {
  return _impl_.distances_.Get(index);
}
inline const ::proto::Distance& TransportCatalogue::distances(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.distances)
  return _internal_distances(index);
}
inline ::proto::Distance* TransportCatalogue::_internal_add_distances() {
  return _impl_.distances_.Add();
}
inline ::proto::Distance* TransportCatalogue::add_distances() {
  ::proto::Distance* _add = _internal_add_distances();
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.distances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >&
TransportCatalogue::distances() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.distances)
  return _impl_.distances_;
}

// repeated .proto.Bus buses = 3;
inline int TransportCatalogue::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int TransportCatalogue::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalogue::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::proto::Bus* TransportCatalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >*
TransportCatalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.buses)
  return &_impl_.buses_;
}
inline const ::proto::Bus& TransportCatalogue::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::proto::Bus& TransportCatalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.buses)
  return _internal_buses(index);
}
inline ::proto::Bus* TransportCatalogue::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::proto::Bus* TransportCatalogue::add_buses() {
  ::proto::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >&
TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.buses)
  return _impl_.buses_;
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline double Point::_internal_x() const {
  return _impl_.x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:proto.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline double Point::_internal_y() const {
  return _impl_.y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:proto.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.Point.y)
}

// -------------------------------------------------------------------

// Rgb

// uint32 red = 1;
inline void Rgb::clear_red() {
  _impl_.red_ = 0u;
}
inline uint32_t Rgb::_internal_red() const {
  return _impl_.red_;
}
inline uint32_t Rgb::red() const {
  // @@protoc_insertion_point(field_get:proto.Rgb.red)
  return _internal_red();
}
inline void Rgb::_internal_set_red(uint32_t value) {
  
  _impl_.red_ = value;
}
inline void Rgb::set_red(uint32_t value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:proto.Rgb.red)
}

// uint32 green = 2;
inline void Rgb::clear_green() {
  _impl_.green_ = 0u;
}
inline uint32_t Rgb::_internal_green() const {
  return _impl_.green_;
}
inline uint32_t Rgb::green() const {
  // @@protoc_insertion_point(field_get:proto.Rgb.green)
  return _internal_green();
}
inline void Rgb::_internal_set_green(uint32_t value) {
  
  _impl_.green_ = value;
}
inline void Rgb::set_green(uint32_t value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:proto.Rgb.green)
}

// uint32 blue = 3;
inline void Rgb::clear_blue() {
  _impl_.blue_ = 0u;
}
inline uint32_t Rgb::_internal_blue() const {
  return _impl_.blue_;
}
inline uint32_t Rgb::blue() const {
  // @@protoc_insertion_point(field_get:proto.Rgb.blue)
  return _internal_blue();
}
inline void Rgb::_internal_set_blue(uint32_t value) {
  
  _impl_.blue_ = value;
}
inline void Rgb::set_blue(uint32_t value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:proto.Rgb.blue)
}

// -------------------------------------------------------------------

// Rgba

// uint32 red = 1;
inline void Rgba::clear_red() {
  _impl_.red_ = 0u;
}
inline uint32_t Rgba::_internal_red() const {
  return _impl_.red_;
}
inline uint32_t Rgba::red() const {
  // @@protoc_insertion_point(field_get:proto.Rgba.red)
  return _internal_red();
}
inline void Rgba::_internal_set_red(uint32_t value) {
  
  _impl_.red_ = value;
}
inline void Rgba::set_red(uint32_t value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:proto.Rgba.red)
}

// uint32 green = 2;
inline void Rgba::clear_green() {
  _impl_.green_ = 0u;
}
inline uint32_t Rgba::_internal_green() const {
  return _impl_.green_;
}
inline uint32_t Rgba::green() const {
  // @@protoc_insertion_point(field_get:proto.Rgba.green)
  return _internal_green();
}
inline void Rgba::_internal_set_green(uint32_t value) {
  
  _impl_.green_ = value;
}
inline void Rgba::set_green(uint32_t value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:proto.Rgba.green)
}

// uint32 blue = 3;
inline void Rgba::clear_blue() {
  _impl_.blue_ = 0u;
}
inline uint32_t Rgba::_internal_blue() const {
  return _impl_.blue_;
}
inline uint32_t Rgba::blue() const {
  // @@protoc_insertion_point(field_get:proto.Rgba.blue)
  return _internal_blue();
}
inline void Rgba::_internal_set_blue(uint32_t value) {
  
  _impl_.blue_ = value;
}
inline void Rgba::set_blue(uint32_t value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:proto.Rgba.blue)
}

// double opacity = 4;
inline void Rgba::clear_opacity() {
  _impl_.opacity_ = 0;
}
inline double Rgba::_internal_opacity() const {
  return _impl_.opacity_;
}
inline double Rgba::opacity() const {
  // @@protoc_insertion_point(field_get:proto.Rgba.opacity)
  return _internal_opacity();
}
inline void Rgba::_internal_set_opacity(double value) {
  
  _impl_.opacity_ = value;
}
inline void Rgba::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:proto.Rgba.opacity)
}

// -------------------------------------------------------------------

// Color

// string color_type = 1;
inline void Color::clear_color_type() {
  _impl_.color_type_.ClearToEmpty();
}
inline const std::string& Color::color_type() const {
  // @@protoc_insertion_point(field_get:proto.Color.color_type)
  return _internal_color_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Color::set_color_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.color_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Color.color_type)
}
inline std::string* Color::mutable_color_type() {
  std::string* _s = _internal_mutable_color_type();
  // @@protoc_insertion_point(field_mutable:proto.Color.color_type)
  return _s;
}
inline const std::string& Color::_internal_color_type() const {
  return _impl_.color_type_.Get();
}
inline void Color::_internal_set_color_type(const std::string& value) {
  
  _impl_.color_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Color::_internal_mutable_color_type() {
  
  return _impl_.color_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Color::release_color_type() {
  // @@protoc_insertion_point(field_release:proto.Color.color_type)
  return _impl_.color_type_.Release();
}
inline void Color::set_allocated_color_type(std::string* color_type) {
  if (color_type != nullptr) {
    
  } else {
    
  }
  _impl_.color_type_.SetAllocated(color_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_type_.IsDefault()) {
    _impl_.color_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Color.color_type)
}

// string name = 2;
inline void Color::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Color::name() const {
  // @@protoc_insertion_point(field_get:proto.Color.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Color::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Color.name)
}
inline std::string* Color::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Color.name)
  return _s;
}
inline const std::string& Color::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Color::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Color::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Color::release_name() {
  // @@protoc_insertion_point(field_release:proto.Color.name)
  return _impl_.name_.Release();
}
inline void Color::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Color.name)
}

// .proto.Rgb rgb = 3;
inline bool Color::_internal_has_rgb() const {
  return this != internal_default_instance() && _impl_.rgb_ != nullptr;
}
inline bool Color::has_rgb() const {
  return _internal_has_rgb();
}
inline void Color::clear_rgb() {
  if (GetArenaForAllocation() == nullptr && _impl_.rgb_ != nullptr) {
    delete _impl_.rgb_;
  }
  _impl_.rgb_ = nullptr;
}
inline const ::proto::Rgb& Color::_internal_rgb() const {
  const ::proto::Rgb* p = _impl_.rgb_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Rgb&>(
      ::proto::_Rgb_default_instance_);
}
inline const ::proto::Rgb& Color::rgb() const {
  // @@protoc_insertion_point(field_get:proto.Color.rgb)
  return _internal_rgb();
}
inline void Color::unsafe_arena_set_allocated_rgb(
    ::proto::Rgb* rgb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rgb_);
  }
  _impl_.rgb_ = rgb;
  if (rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Color.rgb)
}
inline ::proto::Rgb* Color::release_rgb() {
  
  ::proto::Rgb* temp = _impl_.rgb_;
  _impl_.rgb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Rgb* Color::unsafe_arena_release_rgb() {
  // @@protoc_insertion_point(field_release:proto.Color.rgb)
  
  ::proto::Rgb* temp = _impl_.rgb_;
  _impl_.rgb_ = nullptr;
  return temp;
}
inline ::proto::Rgb* Color::_internal_mutable_rgb() {
  
  if (_impl_.rgb_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Rgb>(GetArenaForAllocation());
    _impl_.rgb_ = p;
  }
  return _impl_.rgb_;
}
inline ::proto::Rgb* Color::mutable_rgb() {
  ::proto::Rgb* _msg = _internal_mutable_rgb();
  // @@protoc_insertion_point(field_mutable:proto.Color.rgb)
  return _msg;
}
inline void Color::set_allocated_rgb(::proto::Rgb* rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rgb_;
  }
  if (rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgb);
    if (message_arena != submessage_arena) {
      rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rgb_ = rgb;
  // @@protoc_insertion_point(field_set_allocated:proto.Color.rgb)
}

// .proto.Rgba rgba = 4;
inline bool Color::_internal_has_rgba() const {
  return this != internal_default_instance() && _impl_.rgba_ != nullptr;
}
inline bool Color::has_rgba() const {
  return _internal_has_rgba();
}
inline void Color::clear_rgba() {
  if (GetArenaForAllocation() == nullptr && _impl_.rgba_ != nullptr) {
    delete _impl_.rgba_;
  }
  _impl_.rgba_ = nullptr;
}
inline const ::proto::Rgba& Color::_internal_rgba() const {
  const ::proto::Rgba* p = _impl_.rgba_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Rgba&>(
      ::proto::_Rgba_default_instance_);
}
inline const ::proto::Rgba& Color::rgba() const {
  // @@protoc_insertion_point(field_get:proto.Color.rgba)
  return _internal_rgba();
}
inline void Color::unsafe_arena_set_allocated_rgba(
    ::proto::Rgba* rgba) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rgba_);
  }
  _impl_.rgba_ = rgba;
  if (rgba) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Color.rgba)
}
inline ::proto::Rgba* Color::release_rgba() {
  
  ::proto::Rgba* temp = _impl_.rgba_;
  _impl_.rgba_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Rgba* Color::unsafe_arena_release_rgba() {
  // @@protoc_insertion_point(field_release:proto.Color.rgba)
  
  ::proto::Rgba* temp = _impl_.rgba_;
  _impl_.rgba_ = nullptr;
  return temp;
}
inline ::proto::Rgba* Color::_internal_mutable_rgba() {
  
  if (_impl_.rgba_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Rgba>(GetArenaForAllocation());
    _impl_.rgba_ = p;
  }
  return _impl_.rgba_;
}
inline ::proto::Rgba* Color::mutable_rgba() {
  ::proto::Rgba* _msg = _internal_mutable_rgba();
  // @@protoc_insertion_point(field_mutable:proto.Color.rgba)
  return _msg;
}
inline void Color::set_allocated_rgba(::proto::Rgba* rgba) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rgba_;
  }
  if (rgba) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgba);
    if (message_arena != submessage_arena) {
      rgba = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgba, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rgba_ = rgba;
  // @@protoc_insertion_point(field_set_allocated:proto.Color.rgba)
}

// -------------------------------------------------------------------

// RenderSettings

// double width = 1;
inline void RenderSettings::clear_width() {
  _impl_.width_ = 0;
}
inline double RenderSettings::_internal_width() const {
  return _impl_.width_;
}
inline double RenderSettings::width() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.width)
  return _internal_width();
}
inline void RenderSettings::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void RenderSettings::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.width)
}

// double height = 2;
inline void RenderSettings::clear_height() {
  _impl_.height_ = 0;
}
inline double RenderSettings::_internal_height() const {
  return _impl_.height_;
}
inline double RenderSettings::height() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.height)
  return _internal_height();
}
inline void RenderSettings::_internal_set_height(double value) {
  
  _impl_.height_ = value;
}
inline void RenderSettings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.height)
}

// double padding = 3;
inline void RenderSettings::clear_padding() {
  _impl_.padding_ = 0;
}
inline double RenderSettings::_internal_padding() const {
  return _impl_.padding_;
}
inline double RenderSettings::padding() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.padding)
  return _internal_padding();
}
inline void RenderSettings::_internal_set_padding(double value) {
  
  _impl_.padding_ = value;
}
inline void RenderSettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.padding)
}

// double line_width = 4;
inline void RenderSettings::clear_line_width() {
  _impl_.line_width_ = 0;
}
inline double RenderSettings::_internal_line_width() const {
  return _impl_.line_width_;
}
inline double RenderSettings::line_width() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.line_width)
  return _internal_line_width();
}
inline void RenderSettings::_internal_set_line_width(double value) {
  
  _impl_.line_width_ = value;
}
inline void RenderSettings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.line_width)
}

// double stop_radius = 5;
inline void RenderSettings::clear_stop_radius() {
  _impl_.stop_radius_ = 0;
}
inline double RenderSettings::_internal_stop_radius() const {
  return _impl_.stop_radius_;
}
inline double RenderSettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.stop_radius)
  return _internal_stop_radius();
}
inline void RenderSettings::_internal_set_stop_radius(double value) {
  
  _impl_.stop_radius_ = value;
}
inline void RenderSettings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.stop_radius)
}

// uint32 bus_label_font_size = 6;
inline void RenderSettings::clear_bus_label_font_size() {
  _impl_.bus_label_font_size_ = 0u;
}
inline uint32_t RenderSettings::_internal_bus_label_font_size() const {
  return _impl_.bus_label_font_size_;
}
inline uint32_t RenderSettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void RenderSettings::_internal_set_bus_label_font_size(uint32_t value) {
  
  _impl_.bus_label_font_size_ = value;
}
inline void RenderSettings::set_bus_label_font_size(uint32_t value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.bus_label_font_size)
}

// .proto.Point bus_label_offset = 7;
inline bool RenderSettings::_internal_has_bus_label_offset() const {
  return this != internal_default_instance() && _impl_.bus_label_offset_ != nullptr;
}
inline bool RenderSettings::has_bus_label_offset() const {
  return _internal_has_bus_label_offset();
}
inline void RenderSettings::clear_bus_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.bus_label_offset_ != nullptr) {
    delete _impl_.bus_label_offset_;
  }
  _impl_.bus_label_offset_ = nullptr;
}
inline const ::proto::Point& RenderSettings::_internal_bus_label_offset() const {
  const ::proto::Point* p = _impl_.bus_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Point&>(
      ::proto::_Point_default_instance_);
}
inline const ::proto::Point& RenderSettings::bus_label_offset() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.bus_label_offset)
  return _internal_bus_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_bus_label_offset(
    ::proto::Point* bus_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bus_label_offset_);
  }
  _impl_.bus_label_offset_ = bus_label_offset;
  if (bus_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RenderSettings.bus_label_offset)
}
inline ::proto::Point* RenderSettings::release_bus_label_offset() {
  
  ::proto::Point* temp = _impl_.bus_label_offset_;
  _impl_.bus_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Point* RenderSettings::unsafe_arena_release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:proto.RenderSettings.bus_label_offset)
  
  ::proto::Point* temp = _impl_.bus_label_offset_;
  _impl_.bus_label_offset_ = nullptr;
  return temp;
}
inline ::proto::Point* RenderSettings::_internal_mutable_bus_label_offset() {
  
  if (_impl_.bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Point>(GetArenaForAllocation());
    _impl_.bus_label_offset_ = p;
  }
  return _impl_.bus_label_offset_;
}
inline ::proto::Point* RenderSettings::mutable_bus_label_offset() {
  ::proto::Point* _msg = _internal_mutable_bus_label_offset();
  // @@protoc_insertion_point(field_mutable:proto.RenderSettings.bus_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_bus_label_offset(::proto::Point* bus_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bus_label_offset_;
  }
  if (bus_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bus_label_offset);
    if (message_arena != submessage_arena) {
      bus_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:proto.RenderSettings.bus_label_offset)
}

// uint32 stop_label_font_size = 8;
inline void RenderSettings::clear_stop_label_font_size() {
  _impl_.stop_label_font_size_ = 0u;
}
inline uint32_t RenderSettings::_internal_stop_label_font_size() const {
  return _impl_.stop_label_font_size_;
}
inline uint32_t RenderSettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void RenderSettings::_internal_set_stop_label_font_size(uint32_t value) {
  
  _impl_.stop_label_font_size_ = value;
}
inline void RenderSettings::set_stop_label_font_size(uint32_t value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.stop_label_font_size)
}

// .proto.Point stop_label_offset = 9;
inline bool RenderSettings::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && _impl_.stop_label_offset_ != nullptr;
}
inline bool RenderSettings::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline void RenderSettings::clear_stop_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.stop_label_offset_ != nullptr) {
    delete _impl_.stop_label_offset_;
  }
  _impl_.stop_label_offset_ = nullptr;
}
inline const ::proto::Point& RenderSettings::_internal_stop_label_offset() const {
  const ::proto::Point* p = _impl_.stop_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Point&>(
      ::proto::_Point_default_instance_);
}
inline const ::proto::Point& RenderSettings::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_stop_label_offset(
    ::proto::Point* stop_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_label_offset_);
  }
  _impl_.stop_label_offset_ = stop_label_offset;
  if (stop_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RenderSettings.stop_label_offset)
}
inline ::proto::Point* RenderSettings::release_stop_label_offset() {
  
  ::proto::Point* temp = _impl_.stop_label_offset_;
  _impl_.stop_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Point* RenderSettings::unsafe_arena_release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:proto.RenderSettings.stop_label_offset)
  
  ::proto::Point* temp = _impl_.stop_label_offset_;
  _impl_.stop_label_offset_ = nullptr;
  return temp;
}
inline ::proto::Point* RenderSettings::_internal_mutable_stop_label_offset() {
  
  if (_impl_.stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Point>(GetArenaForAllocation());
    _impl_.stop_label_offset_ = p;
  }
  return _impl_.stop_label_offset_;
}
inline ::proto::Point* RenderSettings::mutable_stop_label_offset() {
  ::proto::Point* _msg = _internal_mutable_stop_label_offset();
  // @@protoc_insertion_point(field_mutable:proto.RenderSettings.stop_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_stop_label_offset(::proto::Point* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stop_label_offset_;
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_label_offset);
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:proto.RenderSettings.stop_label_offset)
}

// .proto.Color underlayer_color = 10;
inline bool RenderSettings::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && _impl_.underlayer_color_ != nullptr;
}
inline bool RenderSettings::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline void RenderSettings::clear_underlayer_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.underlayer_color_ != nullptr) {
    delete _impl_.underlayer_color_;
  }
  _impl_.underlayer_color_ = nullptr;
}
inline const ::proto::Color& RenderSettings::_internal_underlayer_color() const {
  const ::proto::Color* p = _impl_.underlayer_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Color&>(
      ::proto::_Color_default_instance_);
}
inline const ::proto::Color& RenderSettings::underlayer_color() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.underlayer_color)
  return _internal_underlayer_color();
}
inline void RenderSettings::unsafe_arena_set_allocated_underlayer_color(
    ::proto::Color* underlayer_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlayer_color_);
  }
  _impl_.underlayer_color_ = underlayer_color;
  if (underlayer_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RenderSettings.underlayer_color)
}
inline ::proto::Color* RenderSettings::release_underlayer_color() {
  
  ::proto::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Color* RenderSettings::unsafe_arena_release_underlayer_color() {
  // @@protoc_insertion_point(field_release:proto.RenderSettings.underlayer_color)
  
  ::proto::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
  return temp;
}
inline ::proto::Color* RenderSettings::_internal_mutable_underlayer_color() {
  
  if (_impl_.underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Color>(GetArenaForAllocation());
    _impl_.underlayer_color_ = p;
  }
  return _impl_.underlayer_color_;
}
inline ::proto::Color* RenderSettings::mutable_underlayer_color() {
  ::proto::Color* _msg = _internal_mutable_underlayer_color();
  // @@protoc_insertion_point(field_mutable:proto.RenderSettings.underlayer_color)
  return _msg;
}
inline void RenderSettings::set_allocated_underlayer_color(::proto::Color* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.underlayer_color_;
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(underlayer_color);
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:proto.RenderSettings.underlayer_color)
}

// double underlayer_width = 11;
inline void RenderSettings::clear_underlayer_width() {
  _impl_.underlayer_width_ = 0;
}
inline double RenderSettings::_internal_underlayer_width() const {
  return _impl_.underlayer_width_;
}
inline double RenderSettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.underlayer_width)
  return _internal_underlayer_width();
}
inline void RenderSettings::_internal_set_underlayer_width(double value) {
  
  _impl_.underlayer_width_ = value;
}
inline void RenderSettings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:proto.RenderSettings.underlayer_width)
}

// repeated .proto.Color color_palette = 12;
inline int RenderSettings::_internal_color_palette_size() const {
  return _impl_.color_palette_.size();
}
inline int RenderSettings::color_palette_size() const {
  return _internal_color_palette_size();
}
inline void RenderSettings::clear_color_palette() {
  _impl_.color_palette_.Clear();
}
inline ::proto::Color* RenderSettings::mutable_color_palette(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RenderSettings.color_palette)
  return _impl_.color_palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color >*
RenderSettings::mutable_color_palette() {
  // @@protoc_insertion_point(field_mutable_list:proto.RenderSettings.color_palette)
  return &_impl_.color_palette_;
}
inline const ::proto::Color& RenderSettings::_internal_color_palette(int index) const {
  return _impl_.color_palette_.Get(index);
}
inline const ::proto::Color& RenderSettings::color_palette(int index) const {
  // @@protoc_insertion_point(field_get:proto.RenderSettings.color_palette)
  return _internal_color_palette(index);
}
inline ::proto::Color* RenderSettings::_internal_add_color_palette() {
  return _impl_.color_palette_.Add();
}
inline ::proto::Color* RenderSettings::add_color_palette() {
  ::proto::Color* _add = _internal_add_color_palette();
  // @@protoc_insertion_point(field_add:proto.RenderSettings.color_palette)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Color >&
RenderSettings::color_palette() const {
  // @@protoc_insertion_point(field_list:proto.RenderSettings.color_palette)
  return _impl_.color_palette_;
}

// -------------------------------------------------------------------

// RoutingSettings

// double bus_wait_time = 1;
inline void RoutingSettings::clear_bus_wait_time() {
  _impl_.bus_wait_time_ = 0;
}
inline double RoutingSettings::_internal_bus_wait_time() const {
  return _impl_.bus_wait_time_;
}
inline double RoutingSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:proto.RoutingSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RoutingSettings::_internal_set_bus_wait_time(double value) {
  
  _impl_.bus_wait_time_ = value;
}
inline void RoutingSettings::set_bus_wait_time(double value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:proto.RoutingSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:proto.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:proto.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// Edge

// uint32 from = 1;
inline void Edge::clear_from() {
  _impl_.from_ = 0u;
}
inline uint32_t Edge::_internal_from() const {
  return _impl_.from_;
}
inline uint32_t Edge::from() const {
  // @@protoc_insertion_point(field_get:proto.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(uint32_t value) {
  
  _impl_.from_ = value;
}
inline void Edge::set_from(uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:proto.Edge.from)
}

// uint32 to = 2;
inline void Edge::clear_to() {
  _impl_.to_ = 0u;
}
inline uint32_t Edge::_internal_to() const {
  return _impl_.to_;
}
inline uint32_t Edge::to() const {
  // @@protoc_insertion_point(field_get:proto.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(uint32_t value) {
  
  _impl_.to_ = value;
}
inline void Edge::set_to(uint32_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:proto.Edge.to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  _impl_.weight_ = 0;
}
inline double Edge::_internal_weight() const {
  return _impl_.weight_;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:proto.Edge.weight)
  return _internal_weight();
}
inline void Edge::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void Edge::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:proto.Edge.weight)
}

// -------------------------------------------------------------------

// IncidenceList

// repeated uint32 list = 1;
inline int IncidenceList::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int IncidenceList::list_size() const {
  return _internal_list_size();
}
inline void IncidenceList::clear_list() {
  _impl_.list_.Clear();
}
inline uint32_t IncidenceList::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline uint32_t IncidenceList::list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IncidenceList.list)
  return _internal_list(index);
}
inline void IncidenceList::set_list(int index, uint32_t value) {
  _impl_.list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.IncidenceList.list)
}
inline void IncidenceList::_internal_add_list(uint32_t value) {
  _impl_.list_.Add(value);
}
inline void IncidenceList::add_list(uint32_t value) {
  _internal_add_list(value);
  // @@protoc_insertion_point(field_add:proto.IncidenceList.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
IncidenceList::_internal_list() const {
  return _impl_.list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
IncidenceList::list() const {
  // @@protoc_insertion_point(field_list:proto.IncidenceList.list)
  return _internal_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
IncidenceList::_internal_mutable_list() {
  return &_impl_.list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
IncidenceList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IncidenceList.list)
  return _internal_mutable_list();
}

// -------------------------------------------------------------------

// Graph

// repeated .proto.Edge edges = 1;
inline int Graph::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int Graph::edges_size() const {
  return _internal_edges_size();
}
inline void Graph::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::proto::Edge* Graph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Graph.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Edge >*
Graph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:proto.Graph.edges)
  return &_impl_.edges_;
}
inline const ::proto::Edge& Graph::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::proto::Edge& Graph::edges(int index) const {
  // @@protoc_insertion_point(field_get:proto.Graph.edges)
  return _internal_edges(index);
}
inline ::proto::Edge* Graph::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::proto::Edge* Graph::add_edges() {
  ::proto::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:proto.Graph.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Edge >&
Graph::edges() const {
  // @@protoc_insertion_point(field_list:proto.Graph.edges)
  return _impl_.edges_;
}

// repeated .proto.IncidenceList incidence_lists = 2;
inline int Graph::_internal_incidence_lists_size() const {
  return _impl_.incidence_lists_.size();
}
inline int Graph::incidence_lists_size() const {
  return _internal_incidence_lists_size();
}
inline void Graph::clear_incidence_lists() {
  _impl_.incidence_lists_.Clear();
}
inline ::proto::IncidenceList* Graph::mutable_incidence_lists(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Graph.incidence_lists)
  return _impl_.incidence_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::IncidenceList >*
Graph::mutable_incidence_lists() {
  // @@protoc_insertion_point(field_mutable_list:proto.Graph.incidence_lists)
  return &_impl_.incidence_lists_;
}
inline const ::proto::IncidenceList& Graph::_internal_incidence_lists(int index) const {
  return _impl_.incidence_lists_.Get(index);
}
inline const ::proto::IncidenceList& Graph::incidence_lists(int index) const {
  // @@protoc_insertion_point(field_get:proto.Graph.incidence_lists)
  return _internal_incidence_lists(index);
}
inline ::proto::IncidenceList* Graph::_internal_add_incidence_lists() {
  return _impl_.incidence_lists_.Add();
}
inline ::proto::IncidenceList* Graph::add_incidence_lists() {
  ::proto::IncidenceList* _add = _internal_add_incidence_lists();
  // @@protoc_insertion_point(field_add:proto.Graph.incidence_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::IncidenceList >&
Graph::incidence_lists() const {
  // @@protoc_insertion_point(field_list:proto.Graph.incidence_lists)
  return _impl_.incidence_lists_;
}

// -------------------------------------------------------------------

// StopVertexId

// string name = 1;
inline void StopVertexId::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StopVertexId::name() const {
  // @@protoc_insertion_point(field_get:proto.StopVertexId.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopVertexId::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.StopVertexId.name)
}
inline std::string* StopVertexId::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.StopVertexId.name)
  return _s;
}
inline const std::string& StopVertexId::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StopVertexId::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StopVertexId::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StopVertexId::release_name() {
  // @@protoc_insertion_point(field_release:proto.StopVertexId.name)
  return _impl_.name_.Release();
}
inline void StopVertexId::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.StopVertexId.name)
}

// uint32 start_wait = 2;
inline void StopVertexId::clear_start_wait() {
  _impl_.start_wait_ = 0u;
}
inline uint32_t StopVertexId::_internal_start_wait() const {
  return _impl_.start_wait_;
}
inline uint32_t StopVertexId::start_wait() const {
  // @@protoc_insertion_point(field_get:proto.StopVertexId.start_wait)
  return _internal_start_wait();
}
inline void StopVertexId::_internal_set_start_wait(uint32_t value) {
  
  _impl_.start_wait_ = value;
}
inline void StopVertexId::set_start_wait(uint32_t value) {
  _internal_set_start_wait(value);
  // @@protoc_insertion_point(field_set:proto.StopVertexId.start_wait)
}

// uint32 end_wait = 3;
inline void StopVertexId::clear_end_wait() {
  _impl_.end_wait_ = 0u;
}
inline uint32_t StopVertexId::_internal_end_wait() const {
  return _impl_.end_wait_;
}
inline uint32_t StopVertexId::end_wait() const {
  // @@protoc_insertion_point(field_get:proto.StopVertexId.end_wait)
  return _internal_end_wait();
}
inline void StopVertexId::_internal_set_end_wait(uint32_t value) {
  
  _impl_.end_wait_ = value;
}
inline void StopVertexId::set_end_wait(uint32_t value) {
  _internal_set_end_wait(value);
  // @@protoc_insertion_point(field_set:proto.StopVertexId.end_wait)
}

// -------------------------------------------------------------------

// EdgeInfo

// .proto.Edge edge = 1;
inline bool EdgeInfo::_internal_has_edge() const {
  return this != internal_default_instance() && _impl_.edge_ != nullptr;
}
inline bool EdgeInfo::has_edge() const {
  return _internal_has_edge();
}
inline void EdgeInfo::clear_edge() {
  if (GetArenaForAllocation() == nullptr && _impl_.edge_ != nullptr) {
    delete _impl_.edge_;
  }
  _impl_.edge_ = nullptr;
}
inline const ::proto::Edge& EdgeInfo::_internal_edge() const {
  const ::proto::Edge* p = _impl_.edge_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Edge&>(
      ::proto::_Edge_default_instance_);
}
inline const ::proto::Edge& EdgeInfo::edge() const {
  // @@protoc_insertion_point(field_get:proto.EdgeInfo.edge)
  return _internal_edge();
}
inline void EdgeInfo::unsafe_arena_set_allocated_edge(
    ::proto::Edge* edge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edge_);
  }
  _impl_.edge_ = edge;
  if (edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.EdgeInfo.edge)
}
inline ::proto::Edge* EdgeInfo::release_edge() {
  
  ::proto::Edge* temp = _impl_.edge_;
  _impl_.edge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Edge* EdgeInfo::unsafe_arena_release_edge() {
  // @@protoc_insertion_point(field_release:proto.EdgeInfo.edge)
  
  ::proto::Edge* temp = _impl_.edge_;
  _impl_.edge_ = nullptr;
  return temp;
}
inline ::proto::Edge* EdgeInfo::_internal_mutable_edge() {
  
  if (_impl_.edge_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Edge>(GetArenaForAllocation());
    _impl_.edge_ = p;
  }
  return _impl_.edge_;
}
inline ::proto::Edge* EdgeInfo::mutable_edge() {
  ::proto::Edge* _msg = _internal_mutable_edge();
  // @@protoc_insertion_point(field_mutable:proto.EdgeInfo.edge)
  return _msg;
}
inline void EdgeInfo::set_allocated_edge(::proto::Edge* edge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.edge_;
  }
  if (edge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(edge);
    if (message_arena != submessage_arena) {
      edge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.edge_ = edge;
  // @@protoc_insertion_point(field_set_allocated:proto.EdgeInfo.edge)
}

// string name = 2;
inline void EdgeInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EdgeInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.EdgeInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdgeInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.EdgeInfo.name)
}
inline std::string* EdgeInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.EdgeInfo.name)
  return _s;
}
inline const std::string& EdgeInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EdgeInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EdgeInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.EdgeInfo.name)
  return _impl_.name_.Release();
}
inline void EdgeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.EdgeInfo.name)
}

// uint32 span_count = 3;
inline void EdgeInfo::clear_span_count() {
  _impl_.span_count_ = 0u;
}
inline uint32_t EdgeInfo::_internal_span_count() const {
  return _impl_.span_count_;
}
inline uint32_t EdgeInfo::span_count() const {
  // @@protoc_insertion_point(field_get:proto.EdgeInfo.span_count)
  return _internal_span_count();
}
inline void EdgeInfo::_internal_set_span_count(uint32_t value) {
  
  _impl_.span_count_ = value;
}
inline void EdgeInfo::set_span_count(uint32_t value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:proto.EdgeInfo.span_count)
}

// double time = 4;
inline void EdgeInfo::clear_time() {
  _impl_.time_ = 0;
}
inline double EdgeInfo::_internal_time() const {
  return _impl_.time_;
}
inline double EdgeInfo::time() const {
  // @@protoc_insertion_point(field_get:proto.EdgeInfo.time)
  return _internal_time();
}
inline void EdgeInfo::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void EdgeInfo::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:proto.EdgeInfo.time)
}

// -------------------------------------------------------------------

// TransportRouter

// .proto.RoutingSettings routing_settings = 1;
inline bool TransportRouter::_internal_has_routing_settings() const {
  return this != internal_default_instance() && _impl_.routing_settings_ != nullptr;
}
inline bool TransportRouter::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void TransportRouter::clear_routing_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.routing_settings_ != nullptr) {
    delete _impl_.routing_settings_;
  }
  _impl_.routing_settings_ = nullptr;
}
inline const ::proto::RoutingSettings& TransportRouter::_internal_routing_settings() const {
  const ::proto::RoutingSettings* p = _impl_.routing_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RoutingSettings&>(
      ::proto::_RoutingSettings_default_instance_);
}
inline const ::proto::RoutingSettings& TransportRouter::routing_settings() const {
  // @@protoc_insertion_point(field_get:proto.TransportRouter.routing_settings)
  return _internal_routing_settings();
}
inline void TransportRouter::unsafe_arena_set_allocated_routing_settings(
    ::proto::RoutingSettings* routing_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_settings_);
  }
  _impl_.routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportRouter.routing_settings)
}
inline ::proto::RoutingSettings* TransportRouter::release_routing_settings() {
  
  ::proto::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RoutingSettings* TransportRouter::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:proto.TransportRouter.routing_settings)
  
  ::proto::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
  return temp;
}
inline ::proto::RoutingSettings* TransportRouter::_internal_mutable_routing_settings() {
  
  if (_impl_.routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RoutingSettings>(GetArenaForAllocation());
    _impl_.routing_settings_ = p;
  }
  return _impl_.routing_settings_;
}
inline ::proto::RoutingSettings* TransportRouter::mutable_routing_settings() {
  ::proto::RoutingSettings* _msg = _internal_mutable_routing_settings();
  // @@protoc_insertion_point(field_mutable:proto.TransportRouter.routing_settings)
  return _msg;
}
inline void TransportRouter::set_allocated_routing_settings(::proto::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportRouter.routing_settings)
}

// .proto.Graph graph = 2;
inline bool TransportRouter::_internal_has_graph() const {
  return this != internal_default_instance() && _impl_.graph_ != nullptr;
}
inline bool TransportRouter::has_graph() const {
  return _internal_has_graph();
}
inline void TransportRouter::clear_graph() {
  if (GetArenaForAllocation() == nullptr && _impl_.graph_ != nullptr) {
    delete _impl_.graph_;
  }
  _impl_.graph_ = nullptr;
}
inline const ::proto::Graph& TransportRouter::_internal_graph() const {
  const ::proto::Graph* p = _impl_.graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Graph&>(
      ::proto::_Graph_default_instance_);
}
inline const ::proto::Graph& TransportRouter::graph() const {
  // @@protoc_insertion_point(field_get:proto.TransportRouter.graph)
  return _internal_graph();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph(
    ::proto::Graph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  _impl_.graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportRouter.graph)
}
inline ::proto::Graph* TransportRouter::release_graph() {
  
  ::proto::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Graph* TransportRouter::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:proto.TransportRouter.graph)
  
  ::proto::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
  return temp;
}
inline ::proto::Graph* TransportRouter::_internal_mutable_graph() {
  
  if (_impl_.graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Graph>(GetArenaForAllocation());
    _impl_.graph_ = p;
  }
  return _impl_.graph_;
}
inline ::proto::Graph* TransportRouter::mutable_graph() {
  ::proto::Graph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:proto.TransportRouter.graph)
  return _msg;
}
inline void TransportRouter::set_allocated_graph(::proto::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(graph);
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportRouter.graph)
}

// repeated .proto.StopVertexId stop_vertex_ids = 3;
inline int TransportRouter::_internal_stop_vertex_ids_size() const {
  return _impl_.stop_vertex_ids_.size();
}
inline int TransportRouter::stop_vertex_ids_size() const {
  return _internal_stop_vertex_ids_size();
}
inline void TransportRouter::clear_stop_vertex_ids() {
  _impl_.stop_vertex_ids_.Clear();
}
inline ::proto::StopVertexId* TransportRouter::mutable_stop_vertex_ids(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportRouter.stop_vertex_ids)
  return _impl_.stop_vertex_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::StopVertexId >*
TransportRouter::mutable_stop_vertex_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportRouter.stop_vertex_ids)
  return &_impl_.stop_vertex_ids_;
}
inline const ::proto::StopVertexId& TransportRouter::_internal_stop_vertex_ids(int index) const {
  return _impl_.stop_vertex_ids_.Get(index);
}
inline const ::proto::StopVertexId& TransportRouter::stop_vertex_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportRouter.stop_vertex_ids)
  return _internal_stop_vertex_ids(index);
}
inline ::proto::StopVertexId* TransportRouter::_internal_add_stop_vertex_ids() {
  return _impl_.stop_vertex_ids_.Add();
}
inline ::proto::StopVertexId* TransportRouter::add_stop_vertex_ids() {
  ::proto::StopVertexId* _add = _internal_add_stop_vertex_ids();
  // @@protoc_insertion_point(field_add:proto.TransportRouter.stop_vertex_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::StopVertexId >&
TransportRouter::stop_vertex_ids() const {
  // @@protoc_insertion_point(field_list:proto.TransportRouter.stop_vertex_ids)
  return _impl_.stop_vertex_ids_;
}

// repeated .proto.EdgeInfo edges_info = 4;
inline int TransportRouter::_internal_edges_info_size() const {
  return _impl_.edges_info_.size();
}
inline int TransportRouter::edges_info_size() const {
  return _internal_edges_info_size();
}
inline void TransportRouter::clear_edges_info() {
  _impl_.edges_info_.Clear();
}
inline ::proto::EdgeInfo* TransportRouter::mutable_edges_info(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportRouter.edges_info)
  return _impl_.edges_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EdgeInfo >*
TransportRouter::mutable_edges_info() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportRouter.edges_info)
  return &_impl_.edges_info_;
}
inline const ::proto::EdgeInfo& TransportRouter::_internal_edges_info(int index) const {
  return _impl_.edges_info_.Get(index);
}
inline const ::proto::EdgeInfo& TransportRouter::edges_info(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportRouter.edges_info)
  return _internal_edges_info(index);
}
inline ::proto::EdgeInfo* TransportRouter::_internal_add_edges_info() {
  return _impl_.edges_info_.Add();
}
inline ::proto::EdgeInfo* TransportRouter::add_edges_info() {
  ::proto::EdgeInfo* _add = _internal_add_edges_info();
  // @@protoc_insertion_point(field_add:proto.TransportRouter.edges_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::EdgeInfo >&
TransportRouter::edges_info() const {
  // @@protoc_insertion_point(field_list:proto.TransportRouter.edges_info)
  return _impl_.edges_info_;
}

// -------------------------------------------------------------------

// Main

// .proto.TransportCatalogue transport_catalogue = 1;
inline bool Main::_internal_has_transport_catalogue() const {
  return this != internal_default_instance() && _impl_.transport_catalogue_ != nullptr;
}
inline bool Main::has_transport_catalogue() const {
  return _internal_has_transport_catalogue();
}
inline void Main::clear_transport_catalogue() {
  if (GetArenaForAllocation() == nullptr && _impl_.transport_catalogue_ != nullptr) {
    delete _impl_.transport_catalogue_;
  }
  _impl_.transport_catalogue_ = nullptr;
}
inline const ::proto::TransportCatalogue& Main::_internal_transport_catalogue() const {
  const ::proto::TransportCatalogue* p = _impl_.transport_catalogue_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransportCatalogue&>(
      ::proto::_TransportCatalogue_default_instance_);
}
inline const ::proto::TransportCatalogue& Main::transport_catalogue() const {
  // @@protoc_insertion_point(field_get:proto.Main.transport_catalogue)
  return _internal_transport_catalogue();
}
inline void Main::unsafe_arena_set_allocated_transport_catalogue(
    ::proto::TransportCatalogue* transport_catalogue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transport_catalogue_);
  }
  _impl_.transport_catalogue_ = transport_catalogue;
  if (transport_catalogue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Main.transport_catalogue)
}
inline ::proto::TransportCatalogue* Main::release_transport_catalogue() {
  
  ::proto::TransportCatalogue* temp = _impl_.transport_catalogue_;
  _impl_.transport_catalogue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransportCatalogue* Main::unsafe_arena_release_transport_catalogue() {
  // @@protoc_insertion_point(field_release:proto.Main.transport_catalogue)
  
  ::proto::TransportCatalogue* temp = _impl_.transport_catalogue_;
  _impl_.transport_catalogue_ = nullptr;
  return temp;
}
inline ::proto::TransportCatalogue* Main::_internal_mutable_transport_catalogue() {
  
  if (_impl_.transport_catalogue_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransportCatalogue>(GetArenaForAllocation());
    _impl_.transport_catalogue_ = p;
  }
  return _impl_.transport_catalogue_;
}
inline ::proto::TransportCatalogue* Main::mutable_transport_catalogue() {
  ::proto::TransportCatalogue* _msg = _internal_mutable_transport_catalogue();
  // @@protoc_insertion_point(field_mutable:proto.Main.transport_catalogue)
  return _msg;
}
inline void Main::set_allocated_transport_catalogue(::proto::TransportCatalogue* transport_catalogue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transport_catalogue_;
  }
  if (transport_catalogue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transport_catalogue);
    if (message_arena != submessage_arena) {
      transport_catalogue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport_catalogue, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transport_catalogue_ = transport_catalogue;
  // @@protoc_insertion_point(field_set_allocated:proto.Main.transport_catalogue)
}

// .proto.RenderSettings render_settings = 2;
inline bool Main::_internal_has_render_settings() const {
  return this != internal_default_instance() && _impl_.render_settings_ != nullptr;
}
inline bool Main::has_render_settings() const {
  return _internal_has_render_settings();
}
inline void Main::clear_render_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.render_settings_ != nullptr) {
    delete _impl_.render_settings_;
  }
  _impl_.render_settings_ = nullptr;
}
inline const ::proto::RenderSettings& Main::_internal_render_settings() const {
  const ::proto::RenderSettings* p = _impl_.render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RenderSettings&>(
      ::proto::_RenderSettings_default_instance_);
}
inline const ::proto::RenderSettings& Main::render_settings() const {
  // @@protoc_insertion_point(field_get:proto.Main.render_settings)
  return _internal_render_settings();
}
inline void Main::unsafe_arena_set_allocated_render_settings(
    ::proto::RenderSettings* render_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.render_settings_);
  }
  _impl_.render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Main.render_settings)
}
inline ::proto::RenderSettings* Main::release_render_settings() {
  
  ::proto::RenderSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RenderSettings* Main::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:proto.Main.render_settings)
  
  ::proto::RenderSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
  return temp;
}
inline ::proto::RenderSettings* Main::_internal_mutable_render_settings() {
  
  if (_impl_.render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RenderSettings>(GetArenaForAllocation());
    _impl_.render_settings_ = p;
  }
  return _impl_.render_settings_;
}
inline ::proto::RenderSettings* Main::mutable_render_settings() {
  ::proto::RenderSettings* _msg = _internal_mutable_render_settings();
  // @@protoc_insertion_point(field_mutable:proto.Main.render_settings)
  return _msg;
}
inline void Main::set_allocated_render_settings(::proto::RenderSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.render_settings_;
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(render_settings);
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:proto.Main.render_settings)
}

// .proto.TransportRouter transport_router = 3;
inline bool Main::_internal_has_transport_router() const {
  return this != internal_default_instance() && _impl_.transport_router_ != nullptr;
}
inline bool Main::has_transport_router() const {
  return _internal_has_transport_router();
}
inline void Main::clear_transport_router() {
  if (GetArenaForAllocation() == nullptr && _impl_.transport_router_ != nullptr) {
    delete _impl_.transport_router_;
  }
  _impl_.transport_router_ = nullptr;
}
inline const ::proto::TransportRouter& Main::_internal_transport_router() const {
  const ::proto::TransportRouter* p = _impl_.transport_router_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransportRouter&>(
      ::proto::_TransportRouter_default_instance_);
}
inline const ::proto::TransportRouter& Main::transport_router() const {
  // @@protoc_insertion_point(field_get:proto.Main.transport_router)
  return _internal_transport_router();
}
inline void Main::unsafe_arena_set_allocated_transport_router(
    ::proto::TransportRouter* transport_router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transport_router_);
  }
  _impl_.transport_router_ = transport_router;
  if (transport_router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Main.transport_router)
}
inline ::proto::TransportRouter* Main::release_transport_router() {
  
  ::proto::TransportRouter* temp = _impl_.transport_router_;
  _impl_.transport_router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransportRouter* Main::unsafe_arena_release_transport_router() {
  // @@protoc_insertion_point(field_release:proto.Main.transport_router)
  
  ::proto::TransportRouter* temp = _impl_.transport_router_;
  _impl_.transport_router_ = nullptr;
  return temp;
}
inline ::proto::TransportRouter* Main::_internal_mutable_transport_router() {
  
  if (_impl_.transport_router_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransportRouter>(GetArenaForAllocation());
    _impl_.transport_router_ = p;
  }
  return _impl_.transport_router_;
}
inline ::proto::TransportRouter* Main::mutable_transport_router() {
  ::proto::TransportRouter* _msg = _internal_mutable_transport_router();
  // @@protoc_insertion_point(field_mutable:proto.Main.transport_router)
  return _msg;
}
inline void Main::set_allocated_transport_router(::proto::TransportRouter* transport_router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transport_router_;
  }
  if (transport_router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transport_router);
    if (message_arena != submessage_arena) {
      transport_router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport_router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transport_router_ = transport_router;
  // @@protoc_insertion_point(field_set_allocated:proto.Main.transport_router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
